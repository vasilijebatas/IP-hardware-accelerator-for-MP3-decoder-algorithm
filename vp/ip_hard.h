#ifndef _IP_HARD_H_
#define _IP_HARD_H_

#include <systemc>
#include <sysc/datatypes/fx/sc_fixed.h>
#include <tlm>
#include <tlm_utils/simple_target_socket.h>
#include <tlm_utils/simple_initiator_socket.h>
#include "vp_addr.h"

const sc_dt::uint64 HARD_READY = 0;
const sc_dt::uint64 HARD_START = 1;
const sc_dt::uint64 HARD_OUT = 3;

using namespace sc_core;
using namespace sc_dt;
using namespace std;
using namespace tlm;



class Ip_hard : public sc_core::sc_module
{
public:
	Ip_hard(sc_core::sc_module_name);

	tlm_utils::simple_target_socket<Ip_hard> soc;
	tlm_utils::simple_initiator_socket<Ip_hard> s_memo;
	tlm_utils::simple_initiator_socket<Ip_hard> isoc;


	inline void set_period(sc_core::sc_time&);

protected:
	sc_event a;

	sc_dt::sc_uint<2> ready;
	sc_dt::sc_uint<2> start;

	int gr;
	int ch;
	int block_type[2][2];
	sc_fixed<16,2> prev_samples[2][32][18];
	sc_fixed<32,2> samples[2][2][576];

	unsigned char val_gr;
	unsigned char val_ch;
	unsigned char val_block_type[2*2];
	unsigned char val_prev_samples[2*32*18*sizeof(sc_fixed<16,2>)];
	unsigned char val_samples[2*2*576*sizeof(sc_fixed<32,16>)];

	unsigned char output[2*2*576*sizeof(sc_fixed<32,16>)];

	sc_fixed<16,2> sine_block[4][36] = 	{{0.043619386851787567139, 0.13052618503570556641, 0.21643961966037750244, 0.30070579051971435547, 0.3826834261417388916, 0.46174860000610351562, 0.53729963302612304688, 0.60876142978668212891, 0.67559021711349487305, 0.7372773289680480957, 0.79335331916809082031, 0.84339141845703125, 0.88701081275939941406, 0.92387950420379638672, 0.9537169337272644043, 0.97629600763320922852, 0.9914448857307434082, 0.9990482330322265625, 0.9990482330322265625, 0.9914448857307434082, 0.97629600763320922852, 0.9537169337272644043, 0.92387950420379638672, 0.88701081275939941406, 0.84339141845703125, 0.79335331916809082031, 0.7372773289680480957, 0.67559021711349487305, 0.60876142978668212891, 0.53729963302612304688, 0.46174860000610351562, 0.3826834261417388916, 0.30070579051971435547, 0.21643961966037750244, 0.13052618503570556641, 0.043619386851787567139},
										{0.043619386851787567139, 0.13052618503570556641, 0.21643961966037750244, 0.30070579051971435547, 0.3826834261417388916, 0.46174860000610351562, 0.53729963302612304688, 0.60876142978668212891, 0.67559021711349487305, 0.7372773289680480957, 0.79335331916809082031, 0.84339141845703125, 0.88701081275939941406, 0.92387950420379638672, 0.9537169337272644043, 0.97629600763320922852, 0.9914448857307434082, 0.9990482330322265625, 1, 1, 1, 1, 1, 1, 0.9914448857307434082, 0.92387950420379638672, 0.79335331916809082031, 0.60876142978668212891, 0.3826834261417388916, 0.13052618503570556641, 0, 0, 0, 0, 0, 0},
										{0.13052618503570556641, 0.3826834261417388916, 0.60876142978668212891, 0.79335331916809082031, 0.92387950420379638672, 0.9914448857307434082, 0.9914448857307434082, 0.92387950420379638672, 0.79335331916809082031, 0.60876142978668212891, 0.3826834261417388916, 0.13052618503570556641, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
										{0, 0, 0, 0, 0, 0, 0.13052618503570556641, 0.3826834261417388916, 0.60876142978668212891, 0.79335331916809082031, 0.92387950420379638672, 0.9914448857307434082, 1, 1, 1, 1, 1, 1, 0.9990482330322265625, 0.9914448857307434082, 0.97629600763320922852, 0.9537169337272644043, 0.92387950420379638672, 0.88701081275939941406, 0.84339141845703125, 0.79335331916809082031, 0.7372773289680480957, 0.67559021711349487305, 0.60876142978668212891, 0.53729963302612304688, 0.46174860000610351562, 0.3826834261417388916, 0.30070579051971435547, 0.21643961966037750244, 0.13052618503570556641, 0.043619386851787567139}
										};

	typedef tlm::tlm_base_protocol_types::tlm_payload_type pl_t;
	void b_transport(pl_t&, sc_core::sc_time&);
	void imdct();
	void msg(const pl_t&);

	pl_t pl;
};



#endif